#include "SPI.h"

static const uint16_t BYTES_DELAY = 874; //874 750
static const uint8_t PACKET_DELAY = 41;

static const uint8_t CDC_PREFIX1 = 0x53;
static const uint8_t CDC_PREFIX2 = 0x2C;

static const uint8_t CDC_END_CMD = 0x14;
static const uint8_t CDC_END_CMD2 = 0x38;
static const uint8_t CDC_PLAY = 0xE4;
static const uint8_t CDC_STOP = 0x10;
static const uint8_t CDC_NEXT = 0xF8;
static const uint8_t CDC_PREV = 0x78;
static const uint8_t CDC_SEEK_FWD = 0xD8;
static const uint8_t CDC_SEEK_RWD = 0x58;
static const uint8_t cd1 = 0x0C;
static const uint8_t cd2 = 0x8C;
static const uint8_t cd3 = 0x4C;
static const uint8_t cd4 = 0xCC;
static const uint8_t cd5 = 0x2C;
static const uint8_t cd6 = 0xAC;
static const uint8_t CDC_SCAN = 0xA0;
static const uint8_t CDC_SFL = 0x60;
static const uint8_t CDC_PLAY_NORMAL = 0x08;

static const uint8_t MODE_PLAY = 0xFF;
static const uint8_t MODE_SHFFL = 0x55;
static const uint8_t MODE_SCAN = 0x00;

uint8_t cd = 0xBE;
uint8_t tr = 0xFE;
uint8_t mode = MODE_PLAY;

void init();
					//frame			cd			tr			time		time 		mode		frame 		frame
void send_package (uint8_t c0, uint8_t c1, uint8_t c2, uint8_t c3, uint8_t c4, uint8_t c5, uint8_t c6, uint8_t c7);


void setup()
{
	Serial.begin(9600);
	Serial.println("start");
	SPI.begin();
	SPI.setBitOrder(MSBFIRST);
	SPI.setDataMode(SPI_MODE1);
	//SPI.setClockDivider(SPI_CLOCK_DIV128); // 62.5kHz@8MHz 125kHz @ 16MHz
	SPI.setClockDivider(SPI_CLOCK_DIV64); //125kHz@8MHz
	
	init();
	
	while(1) //switching to loop took too long?
	{
		send_package(0x34, cd, tr, 0xFF, 0xFF, 0xFF, 0xCF, 0x3C);
		delay(PACKET_DELAY);
	}
}

void init()
{
	send_package (0x74, cd, tr, 0xFF, 0xFF, mode, 0x8F, 0x7C); // idle
	delay(10);
	send_package (0x34, 0xFF, tr, tr, tr, 0xFF, 0xFA, 0x3C); //load disc
	delay(100);
	send_package (0x74, cd, tr, 0xFF, 0xFF, mode, 0x8F, 0x7C); // idle
	delay(10);
}

void loop()
{
	send_package(0x34, cd, tr, 0xFF, 0xFF, 0xFF, 0xCF, 0x3C);
	delay(PACKET_DELAY);
}

void send_package(uint8_t c0, uint8_t c1, uint8_t c2, uint8_t c3, uint8_t c4, uint8_t c5, uint8_t c6, uint8_t c7)
{
	SPI.transfer(c0);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c1);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c2);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c3);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c4);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c5);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c6);
	delayMicroseconds(BYTES_DELAY);
	SPI.transfer(c7);
}


//messages from radio
/*
head head cmd  !cmd
0x53 0x2C 0xAA 0x55

switch on in cd mode/radio to cd (play)
0x53 0x2C 0xE4 0x1B
0x53 0x2C 0x14 0xEB

switch off in cd mode/cd to radio (pause)
0x53 0x2C 0x10 0xEF
0x53 0x2C 0x14 0xEB

next
0x53 0x2C 0xF8 0x7

prev
0x53 0x2C 0x78 0x87

seek next
0x53 0x2C 0xD8 0x27 hold down
0x53 0x2C 0xE4 0x1B release
0x53 0x2C 0x14 0xEB

seek prev
0x53 0x2C 0x58 0xA7 hold down
0x53 0x2C 0xE4 0x1B release
0x53 0x2C 0x14 0xEB

cd 1
0x53 0x2C 0x0C 0xF3
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

cd 2
0x53 0x2C 0x8C 0x73
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

cd 3
0x53 0x2C 0x4C 0xB3
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

cd 4
0x53 0x2C 0xCC 0x33
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

cd 5
0x53 0x2C 0x2C 0xD3
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

cd 6
0x53 0x2C 0xAC 0x53
0x53 0x2C 0x14 0xEB
0x53 0x2C 0x38 0xC7
send new cd no. to confirm change, else:
0x53 0x2C 0xE4 0x1B beep, no cd (same as play)
0x53 0x2C 0x14 0xEB

scan (in 'play', 'shffl' or 'scan' mode)
0x53 0x2C 0xA0 0x5F

shuffle in 'play' mode
0x53 0x2C 0x60 0x9F

shuffle in 'shffl' mode
0x53 0x2C 0x08 0xF7
0x53 0x2C 0x14 0xEB

*/


 

